/**
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.


*/


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode t1 = l1, t2 = l2, res =null, last=null;
        int c = 0, sum=0;
        while(t1!=null || t2!=null)
        {
            if(t1 == null)
            {
                sum = t2.val + c;
                t2 = t2.next;
            }
            else if(t2 == null)
            {
                sum = t1.val + c;
                t1 = t1.next;
            }
            else
            {
                 sum = t2.val + t1.val + c;
                 t2 = t2.next;
                 t1 = t1.next;
            }
            c = sum/10;
            ListNode new_node = new ListNode(sum%10);
            if(res == null)
            {
                res = new_node;
                last = res;
            }
            else
            {
            last.next = new_node;
            last = new_node;
            }
          
        }
        if(c == 1)
        {
            ListNode new_node = new ListNode(1);
            last.next = new_node;
        }
        return res;
    }
}
